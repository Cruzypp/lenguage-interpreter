Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> opt_decls opt_stmts
Rule 2     opt_decls -> decl_lst
Rule 3     opt_decls -> empty
Rule 4     decl_lst -> decl SEMICOLON decl_lst
Rule 5     decl_lst -> decl
Rule 6     decl -> type COLON id_lst
Rule 7     id_lst -> ID COMMA id_lst
Rule 8     id_lst -> ID
Rule 9     type -> INT
Rule 10    type -> FLOAT
Rule 11    stmt -> ID ASSIGN expr
Rule 12    stmt -> IFELSE LPAREN expresion RPAREN LBRACKET opt_stmts RBRACKET LBRACKET opt_stmts RBRACKET
Rule 13    stmt -> WHILE LPAREN expresion RPAREN LBRACKET opt_stmts RBRACKET
Rule 14    stmt -> PRINT expr
Rule 15    stmt -> READ ID
Rule 16    opt_stmts -> stmt_lst
Rule 17    opt_stmts -> empty
Rule 18    stmt_lst -> stmt SEMICOLON stmt_lst
Rule 19    stmt_lst -> stmt
Rule 20    expr -> expr PLUS term
Rule 21    expr -> expr MINUS term
Rule 22    expr -> term
Rule 23    term -> term TIMES factor
Rule 24    term -> term DIVIDE factor
Rule 25    term -> factor
Rule 26    factor -> LPAREN expr RPAREN
Rule 27    factor -> ID
Rule 28    factor -> NUMINT
Rule 29    factor -> NUMFLOAT
Rule 30    expresion -> expr LT expr
Rule 31    expresion -> expr LE expr
Rule 32    expresion -> expr GT expr
Rule 33    expresion -> expr GE expr
Rule 34    expresion -> expr EQ expr
Rule 35    empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 11
COLON                : 6
COMMA                : 7
DIVIDE               : 24
EQ                   : 34
FLOAT                : 10
GE                   : 33
GT                   : 32
ID                   : 7 8 11 15 27
IFELSE               : 12
INT                  : 9
LBRACKET             : 12 12 13
LE                   : 31
LPAREN               : 12 13 26
LT                   : 30
MINUS                : 21
NUMFLOAT             : 29
NUMINT               : 28
PLUS                 : 20
PRINT                : 14
RBRACKET             : 12 12 13
READ                 : 15
RPAREN               : 12 13 26
SEMICOLON            : 4 18
TIMES                : 23
WHILE                : 13
error                : 

Nonterminals, with rules where they appear

decl                 : 4 5
decl_lst             : 2 4
empty                : 3 17
expr                 : 11 14 20 21 26 30 30 31 31 32 32 33 33 34 34
expresion            : 12 13
factor               : 23 24 25
id_lst               : 6 7
opt_decls            : 1
opt_stmts            : 1 12 12 13
program              : 0
stmt                 : 18 19
stmt_lst             : 16 18
term                 : 20 21 22 23 24
type                 : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . opt_decls opt_stmts
    (2) opt_decls -> . decl_lst
    (3) opt_decls -> . empty
    (4) decl_lst -> . decl SEMICOLON decl_lst
    (5) decl_lst -> . decl
    (35) empty -> .
    (6) decl -> . type COLON id_lst
    (9) type -> . INT
    (10) type -> . FLOAT

    ID              reduce using rule 35 (empty -> .)
    IFELSE          reduce using rule 35 (empty -> .)
    WHILE           reduce using rule 35 (empty -> .)
    PRINT           reduce using rule 35 (empty -> .)
    READ            reduce using rule 35 (empty -> .)
    $end            reduce using rule 35 (empty -> .)
    INT             shift and go to state 7
    FLOAT           shift and go to state 8

    program                        shift and go to state 1
    opt_decls                      shift and go to state 2
    decl_lst                       shift and go to state 3
    empty                          shift and go to state 4
    decl                           shift and go to state 5
    type                           shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> opt_decls . opt_stmts
    (16) opt_stmts -> . stmt_lst
    (17) opt_stmts -> . empty
    (18) stmt_lst -> . stmt SEMICOLON stmt_lst
    (19) stmt_lst -> . stmt
    (35) empty -> .
    (11) stmt -> . ID ASSIGN expr
    (12) stmt -> . IFELSE LPAREN expresion RPAREN LBRACKET opt_stmts RBRACKET LBRACKET opt_stmts RBRACKET
    (13) stmt -> . WHILE LPAREN expresion RPAREN LBRACKET opt_stmts RBRACKET
    (14) stmt -> . PRINT expr
    (15) stmt -> . READ ID

    $end            reduce using rule 35 (empty -> .)
    ID              shift and go to state 13
    IFELSE          shift and go to state 14
    WHILE           shift and go to state 15
    PRINT           shift and go to state 16
    READ            shift and go to state 17

    opt_stmts                      shift and go to state 9
    stmt_lst                       shift and go to state 10
    empty                          shift and go to state 11
    stmt                           shift and go to state 12

state 3

    (2) opt_decls -> decl_lst .

    ID              reduce using rule 2 (opt_decls -> decl_lst .)
    IFELSE          reduce using rule 2 (opt_decls -> decl_lst .)
    WHILE           reduce using rule 2 (opt_decls -> decl_lst .)
    PRINT           reduce using rule 2 (opt_decls -> decl_lst .)
    READ            reduce using rule 2 (opt_decls -> decl_lst .)
    $end            reduce using rule 2 (opt_decls -> decl_lst .)


state 4

    (3) opt_decls -> empty .

    ID              reduce using rule 3 (opt_decls -> empty .)
    IFELSE          reduce using rule 3 (opt_decls -> empty .)
    WHILE           reduce using rule 3 (opt_decls -> empty .)
    PRINT           reduce using rule 3 (opt_decls -> empty .)
    READ            reduce using rule 3 (opt_decls -> empty .)
    $end            reduce using rule 3 (opt_decls -> empty .)


state 5

    (4) decl_lst -> decl . SEMICOLON decl_lst
    (5) decl_lst -> decl .

    SEMICOLON       shift and go to state 18
    ID              reduce using rule 5 (decl_lst -> decl .)
    IFELSE          reduce using rule 5 (decl_lst -> decl .)
    WHILE           reduce using rule 5 (decl_lst -> decl .)
    PRINT           reduce using rule 5 (decl_lst -> decl .)
    READ            reduce using rule 5 (decl_lst -> decl .)
    $end            reduce using rule 5 (decl_lst -> decl .)


state 6

    (6) decl -> type . COLON id_lst

    COLON           shift and go to state 19


state 7

    (9) type -> INT .

    COLON           reduce using rule 9 (type -> INT .)


state 8

    (10) type -> FLOAT .

    COLON           reduce using rule 10 (type -> FLOAT .)


state 9

    (1) program -> opt_decls opt_stmts .

    $end            reduce using rule 1 (program -> opt_decls opt_stmts .)


state 10

    (16) opt_stmts -> stmt_lst .

    $end            reduce using rule 16 (opt_stmts -> stmt_lst .)
    RBRACKET        reduce using rule 16 (opt_stmts -> stmt_lst .)


state 11

    (17) opt_stmts -> empty .

    $end            reduce using rule 17 (opt_stmts -> empty .)
    RBRACKET        reduce using rule 17 (opt_stmts -> empty .)


state 12

    (18) stmt_lst -> stmt . SEMICOLON stmt_lst
    (19) stmt_lst -> stmt .

    SEMICOLON       shift and go to state 20
    $end            reduce using rule 19 (stmt_lst -> stmt .)
    RBRACKET        reduce using rule 19 (stmt_lst -> stmt .)


state 13

    (11) stmt -> ID . ASSIGN expr

    ASSIGN          shift and go to state 21


state 14

    (12) stmt -> IFELSE . LPAREN expresion RPAREN LBRACKET opt_stmts RBRACKET LBRACKET opt_stmts RBRACKET

    LPAREN          shift and go to state 22


state 15

    (13) stmt -> WHILE . LPAREN expresion RPAREN LBRACKET opt_stmts RBRACKET

    LPAREN          shift and go to state 23


state 16

    (14) stmt -> PRINT . expr
    (20) expr -> . expr PLUS term
    (21) expr -> . expr MINUS term
    (22) expr -> . term
    (23) term -> . term TIMES factor
    (24) term -> . term DIVIDE factor
    (25) term -> . factor
    (26) factor -> . LPAREN expr RPAREN
    (27) factor -> . ID
    (28) factor -> . NUMINT
    (29) factor -> . NUMFLOAT

    LPAREN          shift and go to state 27
    ID              shift and go to state 28
    NUMINT          shift and go to state 29
    NUMFLOAT        shift and go to state 30

    expr                           shift and go to state 24
    term                           shift and go to state 25
    factor                         shift and go to state 26

state 17

    (15) stmt -> READ . ID

    ID              shift and go to state 31


state 18

    (4) decl_lst -> decl SEMICOLON . decl_lst
    (4) decl_lst -> . decl SEMICOLON decl_lst
    (5) decl_lst -> . decl
    (6) decl -> . type COLON id_lst
    (9) type -> . INT
    (10) type -> . FLOAT

    INT             shift and go to state 7
    FLOAT           shift and go to state 8

    decl                           shift and go to state 5
    decl_lst                       shift and go to state 32
    type                           shift and go to state 6

state 19

    (6) decl -> type COLON . id_lst
    (7) id_lst -> . ID COMMA id_lst
    (8) id_lst -> . ID

    ID              shift and go to state 34

    id_lst                         shift and go to state 33

state 20

    (18) stmt_lst -> stmt SEMICOLON . stmt_lst
    (18) stmt_lst -> . stmt SEMICOLON stmt_lst
    (19) stmt_lst -> . stmt
    (11) stmt -> . ID ASSIGN expr
    (12) stmt -> . IFELSE LPAREN expresion RPAREN LBRACKET opt_stmts RBRACKET LBRACKET opt_stmts RBRACKET
    (13) stmt -> . WHILE LPAREN expresion RPAREN LBRACKET opt_stmts RBRACKET
    (14) stmt -> . PRINT expr
    (15) stmt -> . READ ID

    ID              shift and go to state 13
    IFELSE          shift and go to state 14
    WHILE           shift and go to state 15
    PRINT           shift and go to state 16
    READ            shift and go to state 17

    stmt                           shift and go to state 12
    stmt_lst                       shift and go to state 35

state 21

    (11) stmt -> ID ASSIGN . expr
    (20) expr -> . expr PLUS term
    (21) expr -> . expr MINUS term
    (22) expr -> . term
    (23) term -> . term TIMES factor
    (24) term -> . term DIVIDE factor
    (25) term -> . factor
    (26) factor -> . LPAREN expr RPAREN
    (27) factor -> . ID
    (28) factor -> . NUMINT
    (29) factor -> . NUMFLOAT

    LPAREN          shift and go to state 27
    ID              shift and go to state 28
    NUMINT          shift and go to state 29
    NUMFLOAT        shift and go to state 30

    expr                           shift and go to state 36
    term                           shift and go to state 25
    factor                         shift and go to state 26

state 22

    (12) stmt -> IFELSE LPAREN . expresion RPAREN LBRACKET opt_stmts RBRACKET LBRACKET opt_stmts RBRACKET
    (30) expresion -> . expr LT expr
    (31) expresion -> . expr LE expr
    (32) expresion -> . expr GT expr
    (33) expresion -> . expr GE expr
    (34) expresion -> . expr EQ expr
    (20) expr -> . expr PLUS term
    (21) expr -> . expr MINUS term
    (22) expr -> . term
    (23) term -> . term TIMES factor
    (24) term -> . term DIVIDE factor
    (25) term -> . factor
    (26) factor -> . LPAREN expr RPAREN
    (27) factor -> . ID
    (28) factor -> . NUMINT
    (29) factor -> . NUMFLOAT

    LPAREN          shift and go to state 27
    ID              shift and go to state 28
    NUMINT          shift and go to state 29
    NUMFLOAT        shift and go to state 30

    expresion                      shift and go to state 37
    expr                           shift and go to state 38
    term                           shift and go to state 25
    factor                         shift and go to state 26

state 23

    (13) stmt -> WHILE LPAREN . expresion RPAREN LBRACKET opt_stmts RBRACKET
    (30) expresion -> . expr LT expr
    (31) expresion -> . expr LE expr
    (32) expresion -> . expr GT expr
    (33) expresion -> . expr GE expr
    (34) expresion -> . expr EQ expr
    (20) expr -> . expr PLUS term
    (21) expr -> . expr MINUS term
    (22) expr -> . term
    (23) term -> . term TIMES factor
    (24) term -> . term DIVIDE factor
    (25) term -> . factor
    (26) factor -> . LPAREN expr RPAREN
    (27) factor -> . ID
    (28) factor -> . NUMINT
    (29) factor -> . NUMFLOAT

    LPAREN          shift and go to state 27
    ID              shift and go to state 28
    NUMINT          shift and go to state 29
    NUMFLOAT        shift and go to state 30

    expresion                      shift and go to state 39
    expr                           shift and go to state 38
    term                           shift and go to state 25
    factor                         shift and go to state 26

state 24

    (14) stmt -> PRINT expr .
    (20) expr -> expr . PLUS term
    (21) expr -> expr . MINUS term

    SEMICOLON       reduce using rule 14 (stmt -> PRINT expr .)
    $end            reduce using rule 14 (stmt -> PRINT expr .)
    RBRACKET        reduce using rule 14 (stmt -> PRINT expr .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41


state 25

    (22) expr -> term .
    (23) term -> term . TIMES factor
    (24) term -> term . DIVIDE factor

    PLUS            reduce using rule 22 (expr -> term .)
    MINUS           reduce using rule 22 (expr -> term .)
    SEMICOLON       reduce using rule 22 (expr -> term .)
    $end            reduce using rule 22 (expr -> term .)
    RBRACKET        reduce using rule 22 (expr -> term .)
    LT              reduce using rule 22 (expr -> term .)
    LE              reduce using rule 22 (expr -> term .)
    GT              reduce using rule 22 (expr -> term .)
    GE              reduce using rule 22 (expr -> term .)
    EQ              reduce using rule 22 (expr -> term .)
    RPAREN          reduce using rule 22 (expr -> term .)
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43


state 26

    (25) term -> factor .

    TIMES           reduce using rule 25 (term -> factor .)
    DIVIDE          reduce using rule 25 (term -> factor .)
    PLUS            reduce using rule 25 (term -> factor .)
    MINUS           reduce using rule 25 (term -> factor .)
    SEMICOLON       reduce using rule 25 (term -> factor .)
    $end            reduce using rule 25 (term -> factor .)
    RBRACKET        reduce using rule 25 (term -> factor .)
    LT              reduce using rule 25 (term -> factor .)
    LE              reduce using rule 25 (term -> factor .)
    GT              reduce using rule 25 (term -> factor .)
    GE              reduce using rule 25 (term -> factor .)
    EQ              reduce using rule 25 (term -> factor .)
    RPAREN          reduce using rule 25 (term -> factor .)


state 27

    (26) factor -> LPAREN . expr RPAREN
    (20) expr -> . expr PLUS term
    (21) expr -> . expr MINUS term
    (22) expr -> . term
    (23) term -> . term TIMES factor
    (24) term -> . term DIVIDE factor
    (25) term -> . factor
    (26) factor -> . LPAREN expr RPAREN
    (27) factor -> . ID
    (28) factor -> . NUMINT
    (29) factor -> . NUMFLOAT

    LPAREN          shift and go to state 27
    ID              shift and go to state 28
    NUMINT          shift and go to state 29
    NUMFLOAT        shift and go to state 30

    expr                           shift and go to state 44
    term                           shift and go to state 25
    factor                         shift and go to state 26

state 28

    (27) factor -> ID .

    TIMES           reduce using rule 27 (factor -> ID .)
    DIVIDE          reduce using rule 27 (factor -> ID .)
    PLUS            reduce using rule 27 (factor -> ID .)
    MINUS           reduce using rule 27 (factor -> ID .)
    SEMICOLON       reduce using rule 27 (factor -> ID .)
    $end            reduce using rule 27 (factor -> ID .)
    RBRACKET        reduce using rule 27 (factor -> ID .)
    LT              reduce using rule 27 (factor -> ID .)
    LE              reduce using rule 27 (factor -> ID .)
    GT              reduce using rule 27 (factor -> ID .)
    GE              reduce using rule 27 (factor -> ID .)
    EQ              reduce using rule 27 (factor -> ID .)
    RPAREN          reduce using rule 27 (factor -> ID .)


state 29

    (28) factor -> NUMINT .

    TIMES           reduce using rule 28 (factor -> NUMINT .)
    DIVIDE          reduce using rule 28 (factor -> NUMINT .)
    PLUS            reduce using rule 28 (factor -> NUMINT .)
    MINUS           reduce using rule 28 (factor -> NUMINT .)
    SEMICOLON       reduce using rule 28 (factor -> NUMINT .)
    $end            reduce using rule 28 (factor -> NUMINT .)
    RBRACKET        reduce using rule 28 (factor -> NUMINT .)
    LT              reduce using rule 28 (factor -> NUMINT .)
    LE              reduce using rule 28 (factor -> NUMINT .)
    GT              reduce using rule 28 (factor -> NUMINT .)
    GE              reduce using rule 28 (factor -> NUMINT .)
    EQ              reduce using rule 28 (factor -> NUMINT .)
    RPAREN          reduce using rule 28 (factor -> NUMINT .)


state 30

    (29) factor -> NUMFLOAT .

    TIMES           reduce using rule 29 (factor -> NUMFLOAT .)
    DIVIDE          reduce using rule 29 (factor -> NUMFLOAT .)
    PLUS            reduce using rule 29 (factor -> NUMFLOAT .)
    MINUS           reduce using rule 29 (factor -> NUMFLOAT .)
    SEMICOLON       reduce using rule 29 (factor -> NUMFLOAT .)
    $end            reduce using rule 29 (factor -> NUMFLOAT .)
    RBRACKET        reduce using rule 29 (factor -> NUMFLOAT .)
    LT              reduce using rule 29 (factor -> NUMFLOAT .)
    LE              reduce using rule 29 (factor -> NUMFLOAT .)
    GT              reduce using rule 29 (factor -> NUMFLOAT .)
    GE              reduce using rule 29 (factor -> NUMFLOAT .)
    EQ              reduce using rule 29 (factor -> NUMFLOAT .)
    RPAREN          reduce using rule 29 (factor -> NUMFLOAT .)


state 31

    (15) stmt -> READ ID .

    SEMICOLON       reduce using rule 15 (stmt -> READ ID .)
    $end            reduce using rule 15 (stmt -> READ ID .)
    RBRACKET        reduce using rule 15 (stmt -> READ ID .)


state 32

    (4) decl_lst -> decl SEMICOLON decl_lst .

    ID              reduce using rule 4 (decl_lst -> decl SEMICOLON decl_lst .)
    IFELSE          reduce using rule 4 (decl_lst -> decl SEMICOLON decl_lst .)
    WHILE           reduce using rule 4 (decl_lst -> decl SEMICOLON decl_lst .)
    PRINT           reduce using rule 4 (decl_lst -> decl SEMICOLON decl_lst .)
    READ            reduce using rule 4 (decl_lst -> decl SEMICOLON decl_lst .)
    $end            reduce using rule 4 (decl_lst -> decl SEMICOLON decl_lst .)


state 33

    (6) decl -> type COLON id_lst .

    SEMICOLON       reduce using rule 6 (decl -> type COLON id_lst .)
    ID              reduce using rule 6 (decl -> type COLON id_lst .)
    IFELSE          reduce using rule 6 (decl -> type COLON id_lst .)
    WHILE           reduce using rule 6 (decl -> type COLON id_lst .)
    PRINT           reduce using rule 6 (decl -> type COLON id_lst .)
    READ            reduce using rule 6 (decl -> type COLON id_lst .)
    $end            reduce using rule 6 (decl -> type COLON id_lst .)


state 34

    (7) id_lst -> ID . COMMA id_lst
    (8) id_lst -> ID .

    COMMA           shift and go to state 45
    SEMICOLON       reduce using rule 8 (id_lst -> ID .)
    ID              reduce using rule 8 (id_lst -> ID .)
    IFELSE          reduce using rule 8 (id_lst -> ID .)
    WHILE           reduce using rule 8 (id_lst -> ID .)
    PRINT           reduce using rule 8 (id_lst -> ID .)
    READ            reduce using rule 8 (id_lst -> ID .)
    $end            reduce using rule 8 (id_lst -> ID .)


state 35

    (18) stmt_lst -> stmt SEMICOLON stmt_lst .

    $end            reduce using rule 18 (stmt_lst -> stmt SEMICOLON stmt_lst .)
    RBRACKET        reduce using rule 18 (stmt_lst -> stmt SEMICOLON stmt_lst .)


state 36

    (11) stmt -> ID ASSIGN expr .
    (20) expr -> expr . PLUS term
    (21) expr -> expr . MINUS term

    SEMICOLON       reduce using rule 11 (stmt -> ID ASSIGN expr .)
    $end            reduce using rule 11 (stmt -> ID ASSIGN expr .)
    RBRACKET        reduce using rule 11 (stmt -> ID ASSIGN expr .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41


state 37

    (12) stmt -> IFELSE LPAREN expresion . RPAREN LBRACKET opt_stmts RBRACKET LBRACKET opt_stmts RBRACKET

    RPAREN          shift and go to state 46


state 38

    (30) expresion -> expr . LT expr
    (31) expresion -> expr . LE expr
    (32) expresion -> expr . GT expr
    (33) expresion -> expr . GE expr
    (34) expresion -> expr . EQ expr
    (20) expr -> expr . PLUS term
    (21) expr -> expr . MINUS term

    LT              shift and go to state 47
    LE              shift and go to state 48
    GT              shift and go to state 49
    GE              shift and go to state 50
    EQ              shift and go to state 51
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41


state 39

    (13) stmt -> WHILE LPAREN expresion . RPAREN LBRACKET opt_stmts RBRACKET

    RPAREN          shift and go to state 52


state 40

    (20) expr -> expr PLUS . term
    (23) term -> . term TIMES factor
    (24) term -> . term DIVIDE factor
    (25) term -> . factor
    (26) factor -> . LPAREN expr RPAREN
    (27) factor -> . ID
    (28) factor -> . NUMINT
    (29) factor -> . NUMFLOAT

    LPAREN          shift and go to state 27
    ID              shift and go to state 28
    NUMINT          shift and go to state 29
    NUMFLOAT        shift and go to state 30

    term                           shift and go to state 53
    factor                         shift and go to state 26

state 41

    (21) expr -> expr MINUS . term
    (23) term -> . term TIMES factor
    (24) term -> . term DIVIDE factor
    (25) term -> . factor
    (26) factor -> . LPAREN expr RPAREN
    (27) factor -> . ID
    (28) factor -> . NUMINT
    (29) factor -> . NUMFLOAT

    LPAREN          shift and go to state 27
    ID              shift and go to state 28
    NUMINT          shift and go to state 29
    NUMFLOAT        shift and go to state 30

    term                           shift and go to state 54
    factor                         shift and go to state 26

state 42

    (23) term -> term TIMES . factor
    (26) factor -> . LPAREN expr RPAREN
    (27) factor -> . ID
    (28) factor -> . NUMINT
    (29) factor -> . NUMFLOAT

    LPAREN          shift and go to state 27
    ID              shift and go to state 28
    NUMINT          shift and go to state 29
    NUMFLOAT        shift and go to state 30

    factor                         shift and go to state 55

state 43

    (24) term -> term DIVIDE . factor
    (26) factor -> . LPAREN expr RPAREN
    (27) factor -> . ID
    (28) factor -> . NUMINT
    (29) factor -> . NUMFLOAT

    LPAREN          shift and go to state 27
    ID              shift and go to state 28
    NUMINT          shift and go to state 29
    NUMFLOAT        shift and go to state 30

    factor                         shift and go to state 56

state 44

    (26) factor -> LPAREN expr . RPAREN
    (20) expr -> expr . PLUS term
    (21) expr -> expr . MINUS term

    RPAREN          shift and go to state 57
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41


state 45

    (7) id_lst -> ID COMMA . id_lst
    (7) id_lst -> . ID COMMA id_lst
    (8) id_lst -> . ID

    ID              shift and go to state 34

    id_lst                         shift and go to state 58

state 46

    (12) stmt -> IFELSE LPAREN expresion RPAREN . LBRACKET opt_stmts RBRACKET LBRACKET opt_stmts RBRACKET

    LBRACKET        shift and go to state 59


state 47

    (30) expresion -> expr LT . expr
    (20) expr -> . expr PLUS term
    (21) expr -> . expr MINUS term
    (22) expr -> . term
    (23) term -> . term TIMES factor
    (24) term -> . term DIVIDE factor
    (25) term -> . factor
    (26) factor -> . LPAREN expr RPAREN
    (27) factor -> . ID
    (28) factor -> . NUMINT
    (29) factor -> . NUMFLOAT

    LPAREN          shift and go to state 27
    ID              shift and go to state 28
    NUMINT          shift and go to state 29
    NUMFLOAT        shift and go to state 30

    expr                           shift and go to state 60
    term                           shift and go to state 25
    factor                         shift and go to state 26

state 48

    (31) expresion -> expr LE . expr
    (20) expr -> . expr PLUS term
    (21) expr -> . expr MINUS term
    (22) expr -> . term
    (23) term -> . term TIMES factor
    (24) term -> . term DIVIDE factor
    (25) term -> . factor
    (26) factor -> . LPAREN expr RPAREN
    (27) factor -> . ID
    (28) factor -> . NUMINT
    (29) factor -> . NUMFLOAT

    LPAREN          shift and go to state 27
    ID              shift and go to state 28
    NUMINT          shift and go to state 29
    NUMFLOAT        shift and go to state 30

    expr                           shift and go to state 61
    term                           shift and go to state 25
    factor                         shift and go to state 26

state 49

    (32) expresion -> expr GT . expr
    (20) expr -> . expr PLUS term
    (21) expr -> . expr MINUS term
    (22) expr -> . term
    (23) term -> . term TIMES factor
    (24) term -> . term DIVIDE factor
    (25) term -> . factor
    (26) factor -> . LPAREN expr RPAREN
    (27) factor -> . ID
    (28) factor -> . NUMINT
    (29) factor -> . NUMFLOAT

    LPAREN          shift and go to state 27
    ID              shift and go to state 28
    NUMINT          shift and go to state 29
    NUMFLOAT        shift and go to state 30

    expr                           shift and go to state 62
    term                           shift and go to state 25
    factor                         shift and go to state 26

state 50

    (33) expresion -> expr GE . expr
    (20) expr -> . expr PLUS term
    (21) expr -> . expr MINUS term
    (22) expr -> . term
    (23) term -> . term TIMES factor
    (24) term -> . term DIVIDE factor
    (25) term -> . factor
    (26) factor -> . LPAREN expr RPAREN
    (27) factor -> . ID
    (28) factor -> . NUMINT
    (29) factor -> . NUMFLOAT

    LPAREN          shift and go to state 27
    ID              shift and go to state 28
    NUMINT          shift and go to state 29
    NUMFLOAT        shift and go to state 30

    expr                           shift and go to state 63
    term                           shift and go to state 25
    factor                         shift and go to state 26

state 51

    (34) expresion -> expr EQ . expr
    (20) expr -> . expr PLUS term
    (21) expr -> . expr MINUS term
    (22) expr -> . term
    (23) term -> . term TIMES factor
    (24) term -> . term DIVIDE factor
    (25) term -> . factor
    (26) factor -> . LPAREN expr RPAREN
    (27) factor -> . ID
    (28) factor -> . NUMINT
    (29) factor -> . NUMFLOAT

    LPAREN          shift and go to state 27
    ID              shift and go to state 28
    NUMINT          shift and go to state 29
    NUMFLOAT        shift and go to state 30

    expr                           shift and go to state 64
    term                           shift and go to state 25
    factor                         shift and go to state 26

state 52

    (13) stmt -> WHILE LPAREN expresion RPAREN . LBRACKET opt_stmts RBRACKET

    LBRACKET        shift and go to state 65


state 53

    (20) expr -> expr PLUS term .
    (23) term -> term . TIMES factor
    (24) term -> term . DIVIDE factor

    PLUS            reduce using rule 20 (expr -> expr PLUS term .)
    MINUS           reduce using rule 20 (expr -> expr PLUS term .)
    SEMICOLON       reduce using rule 20 (expr -> expr PLUS term .)
    $end            reduce using rule 20 (expr -> expr PLUS term .)
    RBRACKET        reduce using rule 20 (expr -> expr PLUS term .)
    LT              reduce using rule 20 (expr -> expr PLUS term .)
    LE              reduce using rule 20 (expr -> expr PLUS term .)
    GT              reduce using rule 20 (expr -> expr PLUS term .)
    GE              reduce using rule 20 (expr -> expr PLUS term .)
    EQ              reduce using rule 20 (expr -> expr PLUS term .)
    RPAREN          reduce using rule 20 (expr -> expr PLUS term .)
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43


state 54

    (21) expr -> expr MINUS term .
    (23) term -> term . TIMES factor
    (24) term -> term . DIVIDE factor

    PLUS            reduce using rule 21 (expr -> expr MINUS term .)
    MINUS           reduce using rule 21 (expr -> expr MINUS term .)
    SEMICOLON       reduce using rule 21 (expr -> expr MINUS term .)
    $end            reduce using rule 21 (expr -> expr MINUS term .)
    RBRACKET        reduce using rule 21 (expr -> expr MINUS term .)
    LT              reduce using rule 21 (expr -> expr MINUS term .)
    LE              reduce using rule 21 (expr -> expr MINUS term .)
    GT              reduce using rule 21 (expr -> expr MINUS term .)
    GE              reduce using rule 21 (expr -> expr MINUS term .)
    EQ              reduce using rule 21 (expr -> expr MINUS term .)
    RPAREN          reduce using rule 21 (expr -> expr MINUS term .)
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43


state 55

    (23) term -> term TIMES factor .

    TIMES           reduce using rule 23 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 23 (term -> term TIMES factor .)
    PLUS            reduce using rule 23 (term -> term TIMES factor .)
    MINUS           reduce using rule 23 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 23 (term -> term TIMES factor .)
    $end            reduce using rule 23 (term -> term TIMES factor .)
    RBRACKET        reduce using rule 23 (term -> term TIMES factor .)
    LT              reduce using rule 23 (term -> term TIMES factor .)
    LE              reduce using rule 23 (term -> term TIMES factor .)
    GT              reduce using rule 23 (term -> term TIMES factor .)
    GE              reduce using rule 23 (term -> term TIMES factor .)
    EQ              reduce using rule 23 (term -> term TIMES factor .)
    RPAREN          reduce using rule 23 (term -> term TIMES factor .)


state 56

    (24) term -> term DIVIDE factor .

    TIMES           reduce using rule 24 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 24 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 24 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 24 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 24 (term -> term DIVIDE factor .)
    $end            reduce using rule 24 (term -> term DIVIDE factor .)
    RBRACKET        reduce using rule 24 (term -> term DIVIDE factor .)
    LT              reduce using rule 24 (term -> term DIVIDE factor .)
    LE              reduce using rule 24 (term -> term DIVIDE factor .)
    GT              reduce using rule 24 (term -> term DIVIDE factor .)
    GE              reduce using rule 24 (term -> term DIVIDE factor .)
    EQ              reduce using rule 24 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 24 (term -> term DIVIDE factor .)


state 57

    (26) factor -> LPAREN expr RPAREN .

    TIMES           reduce using rule 26 (factor -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 26 (factor -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 26 (factor -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 26 (factor -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 26 (factor -> LPAREN expr RPAREN .)
    $end            reduce using rule 26 (factor -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 26 (factor -> LPAREN expr RPAREN .)
    LT              reduce using rule 26 (factor -> LPAREN expr RPAREN .)
    LE              reduce using rule 26 (factor -> LPAREN expr RPAREN .)
    GT              reduce using rule 26 (factor -> LPAREN expr RPAREN .)
    GE              reduce using rule 26 (factor -> LPAREN expr RPAREN .)
    EQ              reduce using rule 26 (factor -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 26 (factor -> LPAREN expr RPAREN .)


state 58

    (7) id_lst -> ID COMMA id_lst .

    SEMICOLON       reduce using rule 7 (id_lst -> ID COMMA id_lst .)
    ID              reduce using rule 7 (id_lst -> ID COMMA id_lst .)
    IFELSE          reduce using rule 7 (id_lst -> ID COMMA id_lst .)
    WHILE           reduce using rule 7 (id_lst -> ID COMMA id_lst .)
    PRINT           reduce using rule 7 (id_lst -> ID COMMA id_lst .)
    READ            reduce using rule 7 (id_lst -> ID COMMA id_lst .)
    $end            reduce using rule 7 (id_lst -> ID COMMA id_lst .)


state 59

    (12) stmt -> IFELSE LPAREN expresion RPAREN LBRACKET . opt_stmts RBRACKET LBRACKET opt_stmts RBRACKET
    (16) opt_stmts -> . stmt_lst
    (17) opt_stmts -> . empty
    (18) stmt_lst -> . stmt SEMICOLON stmt_lst
    (19) stmt_lst -> . stmt
    (35) empty -> .
    (11) stmt -> . ID ASSIGN expr
    (12) stmt -> . IFELSE LPAREN expresion RPAREN LBRACKET opt_stmts RBRACKET LBRACKET opt_stmts RBRACKET
    (13) stmt -> . WHILE LPAREN expresion RPAREN LBRACKET opt_stmts RBRACKET
    (14) stmt -> . PRINT expr
    (15) stmt -> . READ ID

    RBRACKET        reduce using rule 35 (empty -> .)
    ID              shift and go to state 13
    IFELSE          shift and go to state 14
    WHILE           shift and go to state 15
    PRINT           shift and go to state 16
    READ            shift and go to state 17

    opt_stmts                      shift and go to state 66
    stmt_lst                       shift and go to state 10
    empty                          shift and go to state 11
    stmt                           shift and go to state 12

state 60

    (30) expresion -> expr LT expr .
    (20) expr -> expr . PLUS term
    (21) expr -> expr . MINUS term

    RPAREN          reduce using rule 30 (expresion -> expr LT expr .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41


state 61

    (31) expresion -> expr LE expr .
    (20) expr -> expr . PLUS term
    (21) expr -> expr . MINUS term

    RPAREN          reduce using rule 31 (expresion -> expr LE expr .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41


state 62

    (32) expresion -> expr GT expr .
    (20) expr -> expr . PLUS term
    (21) expr -> expr . MINUS term

    RPAREN          reduce using rule 32 (expresion -> expr GT expr .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41


state 63

    (33) expresion -> expr GE expr .
    (20) expr -> expr . PLUS term
    (21) expr -> expr . MINUS term

    RPAREN          reduce using rule 33 (expresion -> expr GE expr .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41


state 64

    (34) expresion -> expr EQ expr .
    (20) expr -> expr . PLUS term
    (21) expr -> expr . MINUS term

    RPAREN          reduce using rule 34 (expresion -> expr EQ expr .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41


state 65

    (13) stmt -> WHILE LPAREN expresion RPAREN LBRACKET . opt_stmts RBRACKET
    (16) opt_stmts -> . stmt_lst
    (17) opt_stmts -> . empty
    (18) stmt_lst -> . stmt SEMICOLON stmt_lst
    (19) stmt_lst -> . stmt
    (35) empty -> .
    (11) stmt -> . ID ASSIGN expr
    (12) stmt -> . IFELSE LPAREN expresion RPAREN LBRACKET opt_stmts RBRACKET LBRACKET opt_stmts RBRACKET
    (13) stmt -> . WHILE LPAREN expresion RPAREN LBRACKET opt_stmts RBRACKET
    (14) stmt -> . PRINT expr
    (15) stmt -> . READ ID

    RBRACKET        reduce using rule 35 (empty -> .)
    ID              shift and go to state 13
    IFELSE          shift and go to state 14
    WHILE           shift and go to state 15
    PRINT           shift and go to state 16
    READ            shift and go to state 17

    opt_stmts                      shift and go to state 67
    stmt_lst                       shift and go to state 10
    empty                          shift and go to state 11
    stmt                           shift and go to state 12

state 66

    (12) stmt -> IFELSE LPAREN expresion RPAREN LBRACKET opt_stmts . RBRACKET LBRACKET opt_stmts RBRACKET

    RBRACKET        shift and go to state 68


state 67

    (13) stmt -> WHILE LPAREN expresion RPAREN LBRACKET opt_stmts . RBRACKET

    RBRACKET        shift and go to state 69


state 68

    (12) stmt -> IFELSE LPAREN expresion RPAREN LBRACKET opt_stmts RBRACKET . LBRACKET opt_stmts RBRACKET

    LBRACKET        shift and go to state 70


state 69

    (13) stmt -> WHILE LPAREN expresion RPAREN LBRACKET opt_stmts RBRACKET .

    SEMICOLON       reduce using rule 13 (stmt -> WHILE LPAREN expresion RPAREN LBRACKET opt_stmts RBRACKET .)
    $end            reduce using rule 13 (stmt -> WHILE LPAREN expresion RPAREN LBRACKET opt_stmts RBRACKET .)
    RBRACKET        reduce using rule 13 (stmt -> WHILE LPAREN expresion RPAREN LBRACKET opt_stmts RBRACKET .)


state 70

    (12) stmt -> IFELSE LPAREN expresion RPAREN LBRACKET opt_stmts RBRACKET LBRACKET . opt_stmts RBRACKET
    (16) opt_stmts -> . stmt_lst
    (17) opt_stmts -> . empty
    (18) stmt_lst -> . stmt SEMICOLON stmt_lst
    (19) stmt_lst -> . stmt
    (35) empty -> .
    (11) stmt -> . ID ASSIGN expr
    (12) stmt -> . IFELSE LPAREN expresion RPAREN LBRACKET opt_stmts RBRACKET LBRACKET opt_stmts RBRACKET
    (13) stmt -> . WHILE LPAREN expresion RPAREN LBRACKET opt_stmts RBRACKET
    (14) stmt -> . PRINT expr
    (15) stmt -> . READ ID

    RBRACKET        reduce using rule 35 (empty -> .)
    ID              shift and go to state 13
    IFELSE          shift and go to state 14
    WHILE           shift and go to state 15
    PRINT           shift and go to state 16
    READ            shift and go to state 17

    opt_stmts                      shift and go to state 71
    stmt_lst                       shift and go to state 10
    empty                          shift and go to state 11
    stmt                           shift and go to state 12

state 71

    (12) stmt -> IFELSE LPAREN expresion RPAREN LBRACKET opt_stmts RBRACKET LBRACKET opt_stmts . RBRACKET

    RBRACKET        shift and go to state 72


state 72

    (12) stmt -> IFELSE LPAREN expresion RPAREN LBRACKET opt_stmts RBRACKET LBRACKET opt_stmts RBRACKET .

    SEMICOLON       reduce using rule 12 (stmt -> IFELSE LPAREN expresion RPAREN LBRACKET opt_stmts RBRACKET LBRACKET opt_stmts RBRACKET .)
    $end            reduce using rule 12 (stmt -> IFELSE LPAREN expresion RPAREN LBRACKET opt_stmts RBRACKET LBRACKET opt_stmts RBRACKET .)
    RBRACKET        reduce using rule 12 (stmt -> IFELSE LPAREN expresion RPAREN LBRACKET opt_stmts RBRACKET LBRACKET opt_stmts RBRACKET .)

